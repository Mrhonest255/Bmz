/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Suppervisort as PrismaSuppervisort } from "@prisma/client";

export class SuppervisortServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.SuppervisortCountArgs, "select">
  ): Promise<number> {
    return this.prisma.suppervisort.count(args);
  }

  async suppervisorts<T extends Prisma.SuppervisortFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.SuppervisortFindManyArgs>
  ): Promise<PrismaSuppervisort[]> {
    return this.prisma.suppervisort.findMany<Prisma.SuppervisortFindManyArgs>(
      args
    );
  }
  async suppervisort<T extends Prisma.SuppervisortFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.SuppervisortFindUniqueArgs>
  ): Promise<PrismaSuppervisort | null> {
    return this.prisma.suppervisort.findUnique(args);
  }
  async createSuppervisort<T extends Prisma.SuppervisortCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.SuppervisortCreateArgs>
  ): Promise<PrismaSuppervisort> {
    return this.prisma.suppervisort.create<T>(args);
  }
  async updateSuppervisort<T extends Prisma.SuppervisortUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.SuppervisortUpdateArgs>
  ): Promise<PrismaSuppervisort> {
    return this.prisma.suppervisort.update<T>(args);
  }
  async deleteSuppervisort<T extends Prisma.SuppervisortDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.SuppervisortDeleteArgs>
  ): Promise<PrismaSuppervisort> {
    return this.prisma.suppervisort.delete(args);
  }
}
